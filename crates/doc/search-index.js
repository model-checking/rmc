var searchIndex = new Map(JSON.parse('[["kani",{"t":"GKYFPPPEYPPFEHMNNNNHCQHHEENNNNNNNNNHCHQXNCNNNNNNCQQQQNNNCOQQQQXCXNHXXOQQXXCXCQXEOXXNNNNNNNNNNXCEXXXXXHPPFFGKHHNNNNNNNNNNNNNNMNNHNNNNNNNNNHKMHHHHHHHFNNNNNNNNNNHHHH","n":["AllocationStatus","Arbitrary","","ArbitraryPointer","Dangling","DeadObject","InBounds","Invariant","","Null","OutOfBounds","PointerGenerator","RoundRobin","any","","","any_alloc_status","any_array","any_in_bounds","any_where","arbitrary","arbitrary_tuple","assert","assume","block_on","block_on_with_spawn","borrow","","","borrow_mut","","","clone","clone_into","clone_to_uninit","concrete_playback_run","contracts","cover","","ensures","eq","float","fmt","","","from","","","futures","generate_arbitrary","generate_float","generate_models","implies","into","","","invariant","is_initialized","kani_intrinsics","kani_lib","kani_mem","kani_mem_init","loop_invariant","mem","modifies","new","pointer_generator","proof","proof_for_contract","ptr","ptr_generator","ptr_generator_fn","recursion","requires","shadow","should_panic","slice","slice_generator","solver","spawn","status","stub","stub_verified","to_owned","try_from","","","try_into","","","type_id","","","unwind","vec","yield_now","ensures","modifies","proof_for_contract","requires","stub_verified","float_to_int_in_range","CanAssumeRunning","CannotAssumeRunning","JoinHandle","RoundRobin","SchedulingAssumption","SchedulingStrategy","block_on","block_on_with_spawn","borrow","","","borrow_mut","","","default","from","","","into","","","into_future","pick_task","","poll","spawn","try_from","","","try_into","","","type_id","","","yield_now","Invariant","is_safe","can_dereference","can_read_unaligned","can_write","can_write_unaligned","checked_align_of_raw","checked_size_of_raw","same_allocation","ShadowMem","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","any_slice_of_array","any_slice_of_array_mut","any_vec","exact_vec"],"q":[[0,"kani"],[96,"kani::contracts"],[101,"kani::float"],[102,"kani::futures"],[138,"kani::invariant"],[140,"kani::mem"],[147,"kani::shadow"],[158,"kani::slice"],[160,"kani::vec"],[162,"kani::arbitrary_ptr"],[163,"core::ops::function"],[164,"alloc::vec"],[165,"core::fmt"],[166,"core::result"],[167,"core::any"],[168,"core::convert::num"],[169,"core::future::future"],[170,"core::marker"],[171,"core::pin"],[172,"core::task::wake"],[173,"core::task::poll"],[174,"core::option"],[175,"kani_macros"],[176,"kani_core"]],"i":"````d00``00```b1h10```````0l3103333`````3`103103`````103`0```````1```0``````````0``3103103103`````````Cf0``````0CjCb21002102101C`12`321321321``Db````````Df000000000````","f":"`````````````{{}cb}{{}b}{{}d}{{{j{fh}}}{{l{c}}}b}{{}{{n{b}}}}1{ecb{{Ad{{j{c}}}{{A`{Ab}}}}}}``{{Ab{j{Af}}}Ah}{AbAh}``{j{{j{c}}}{}}00{{{j{f}}}{{j{fc}}}{}}00{{{j{d}}}d}{{j{j{fc}}}Ah{}}{{jAj}Ah}{{{Al{{Al{Aj}}}}c}AhAn}`7``{{{j{d}}{j{d}}}Ab}`{{{j{h}}{j{fB`}}}Bb}{{{j{{l{c}}}}{j{fB`}}}BbBd}{{{j{d}}{j{fB`}}}Bb}{cc{}}00`````{{}c{}}00`{lAb}```````{{}h}0``{l}``````````{ld}``{jc{}}{c{{Bf{e}}}{}{}}00{{}{{Bf{c}}}{}}00{jBh}00````````{eAb{}{{Bj{c}}}}``````{ec{}{{Bl{}{{A`{c}}}}}}{{ce}Ah{{Bl{}{{A`{Ah}}}}Bn}C`}{j{{j{c}}}{}}00{{{j{f}}}{{j{fc}}}{}}00{{}Cb}???>>>{{}}{{{j{fC`}}Cd}{{Ch{CdCf}}}}{{{j{fCb}}Cd}{{Ch{CdCf}}}}{{{Cl{{j{fCj}}}}{j{fCn}}}{{D`{c}}}{}}{cCj{{Bl{}{{A`{Ah}}}}Bn}}===<<<;;;{{}{{`{{Bl{}{{A`{Ah}}}}}}}}`{{{j{Db}}}Ab}{{}Ab}000{{}{{Dd{Cd}}}}01`;:{cc{}}{{{j{{Df{c}}}}}cDh}{{}c{}}{c{{Df{c}}}Dh}{{{j{f{Df{c}}}}c}AhDh}{c{{Bf{e}}}{}{}}{{}{{Bf{c}}}{}}{jBh}{{{j{{n{c}}}}}{{j{{Dj{c}}}}}{}}{{{j{f{n{c}}}}}{{j{f{Dj{c}}}}}{}}{{}{{Al{c}}}b}0","D":"Kf","p":[[10,"Arbitrary",0],[6,"AllocationStatus",0,162],[0,"mut"],[5,"PointerGenerator",0,162],[1,"reference",null,null,1],[5,"ArbitraryPointer",0,162],[1,"array"],[17,"Output"],[1,"bool"],[10,"FnOnce",163],[1,"str"],[1,"unit"],[1,"u8"],[5,"Vec",164],[10,"Fn",163],[5,"Formatter",165],[8,"Result",165],[10,"Debug",165],[6,"Result",166,null,1],[5,"TypeId",167],[10,"FloatToInt",168],[10,"Future",169,null,1],[10,"Sync",170],[10,"SchedulingStrategy",102],[5,"RoundRobin",102],[1,"usize"],[6,"SchedulingAssumption",102],[1,"tuple",null,null,1],[5,"JoinHandle",102],[5,"Pin",171],[5,"Context",172],[6,"Poll",173],[10,"Invariant",138],[6,"Option",174,null,1],[5,"ShadowMem",147],[10,"Copy",170],[1,"slice"]],"r":[[0,162],[2,175],[3,162],[4,162],[5,162],[6,162],[7,138],[8,175],[9,162],[10,162],[11,162],[12,102],[15,162],[16,162],[18,162],[21,176],[24,102],[25,102],[26,162],[27,162],[28,162],[29,162],[30,162],[31,162],[32,162],[33,162],[34,162],[39,175],[40,162],[42,162],[43,162],[44,162],[45,162],[46,162],[47,162],[49,176],[50,176],[51,176],[53,162],[54,162],[55,162],[57,162],[58,176],[59,176],[60,176],[61,176],[62,175],[64,175],[65,162],[66,162],[67,175],[68,175],[69,162],[70,176],[71,176],[72,175],[73,175],[75,175],[77,176],[78,175],[79,102],[80,162],[81,175],[82,175],[83,162],[84,162],[85,162],[86,162],[87,162],[88,162],[89,162],[90,162],[91,162],[92,162],[93,175],[95,102],[96,175],[97,175],[98,175],[99,175],[100,175]],"b":[],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEcAGQAAAAAAAgAAAAgAAAANAAAADwABABIAAAAZAAoAJwAAACkAAAArAAIAMgACAD0AAQBHAAEATQABAFAAAABUAAkAXwABAGcAAQBvAAYAfAAAAH4AAQCBAAgAjAAAAJUAAQCcAAIA","P":[[13,"T"],[14,""],[16,"T"],[17,""],[18,"T"],[19,"T,F"],[22,""],[26,"T"],[32,""],[33,"T"],[34,""],[35,"F"],[37,""],[43,"T"],[44,""],[45,"T"],[53,"U"],[57,""],[83,"T"],[84,"U,T"],[87,"U"],[90,""],[101,"Int,Float"],[108,"T,"],[109,"F,"],[110,"T"],[116,""],[117,"T"],[120,"U"],[123,""],[126,"Future::Output"],[127,"F"],[128,"U,T"],[131,"U"],[134,""],[148,"T"],[152,"U"],[153,"T"],[155,"U,T"],[156,"U"],[157,""],[158,"T"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[5577]}